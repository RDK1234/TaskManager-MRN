This is a code written by Ritesh Dhiman(211138), Nittish Sharma(211139) and Manas Tiwari(211165) to create a task manager. The program includes different classes and functions to manage tasks with different properties. The program starts by defining a struct named "Task", which is used to define a task with various properties such as name, priority, burst time, memory usage, CPU usage, completion status, whether it is a program or not, duration, and network usage.

The program also defines a doubly linked list node class named "Node". The class has a Task object to hold the task data, as well as two pointers, one to the next node in the list (next) and another to the previous node (prev). The constructor initializes the node's task and sets the next and prev pointers to nullptr. The doubly linked list class named "DoublyLinkedList" is also defined, which holds the nodes of the doubly linked list.

The task manager base class named "TaskManagerBase" is also defined, which has a pure virtual function named "run". The class is used as the base class for the task manager class. A task manager exception class named "TaskManagerException" is also defined, which is used to handle exceptions in the task manager.

The program also includes two functions, sortTasks and modifyTask. The sortTasks function is a template function that takes a comparison function object as an argument and sorts the vector of tasks according to the comparison function object. The modifyTask function is a template function that takes a modification function object as an argument and modifies the task with the given name according to the modification function object.

The task manager class named "TaskManager" is defined, which is derived from the task manager base class. The task manager class has functions to add a task, display the task list, sort the task list, modify a task, remove a task, and exit the task manager. The addTask function is used to add a task to the list of tasks. The function asks for various details of the task, such as name, priority, burst time, memory usage, CPU usage, duration, and network usage, and creates a new task object with these details and adds it to the list of tasks.

The displayNodes function is used to display the list of tasks. The function iterates over the doubly linked list and displays each task's name, priority, burst time, memory usage, CPU usage, and completion status. The function also calculates the total network usage of all tasks and displays it at the end.

The run function of the task manager class is used to execute different operations of the task manager. The function creates an infinite loop until the user selects the exit option. The user is provided with different options to choose from. The user can add a task, display the task list, sort the task list, modify a task, remove a task, or exit the task manager. If the user selects the sort option, the function asks for the sorting criteria, such as priority or burst time, and sorts the task list accordingly. If the user selects the modify option, the function asks for the task name and modification details and modifies the task with the given name. If the user selects the remove option, the function asks for the task name and removes the task with the given name.